Smarket1 <- cbind(Smarket, Direction1)
# Linear regression to model Direction1
mod2.2 <- lm(Direction1 ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, data = Smarket1)
stargazer(mod2.2, type="html")
mod2.2 <- lm(Direction1 ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, data = Smarket1)
summary(mod2.2)
mod2.2$coefficients
mod2.2$effects
mod2.2$rank
mod2.2$assign
mod2.2$call
mod2.2$terms
summary(mod2.2)
# Linear regression to model Direction1 with reduced variables
mod2.3 <- lm(Direction1 ~ Lag1 + Lag2, data = Smarket1)
stargazer(mod2.3, type="html")
summary(mod2.3)
# Logit model for Direction1
logit3.1 <- glm(Direction1 ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, data = Smarket1,
family = "binomial")
stargazer(logit3.1)
stargazer(logit3.1, type = 'text')
# Logit model for Direction1
logit3.1 <- glm(Direction1 ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, data = Smarket1,
family = "binomial")
stargazer(logit3.1, type = 'text')
logit3.1 <- glm(Direction1 ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, data = Smarket1,
family = "binomial")
stargazer(logit3.1, type = 'text')
logit3.1 <- glm(Direction1 ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, data = Smarket1,
family = "binomial")
stargazer(logit3.1, type = 'text')
logit3.2 <- glm(Direction1 ~ Lag1 + Lag2, data = Smarket1,
family = "binomial")
stargazer(logit3.2, type = 'text')
# Predict Up/Down based on model
glm.prob <- predict(logit3.2, type = "response")
glm.pred <- rep("Down", 1250)
glm.pred[glm.prob>0.5] <- "Up"
# Compare predicted values to actual values to assess model accuracy
table(glm.pred, Direction)
# Or, see proportions
table(glm.pred, Direction)/1250
# Create training and validation datasets for more accurate prediction testing
train <- Smarket$Year<2005
Smarket.2005 <- Smarket [!train,] #Validation data set
Direction.2005 <- Direction[!train]
# Now create a model on the training dataset
logit3.4 <- glm(Direction1 ~ Lag1 + Lag2, data = Smarket1,
family = "binomial", subset = train)
stargazer(logit3.4, type = 'html')
# Create training and validation datasets for more accurate prediction testing
train <- Smarket$Year<2005
Smarket.2005 <- Smarket [!train,] #Validation data set
Direction.2005 <- Direction[!train]
# Now create a model on the training dataset
logit3.4 <- glm(Direction1 ~ Lag1 + Lag2, data = Smarket1,
family = "binomial", subset = train)
stargazer(logit3.4, type = 'text')
glm.prob.val <- predict(logit3.4, newdata = Smarket.2005, type = "response")
glm.pred.val <- rep("Down", length(Direction.2005))
glm.pred.val[glm.prob.val>0.5] <- "Up"
# Compare predicted values to actual values to assess model accuracy
table(glm.pred.val, Direction.2005)
# Or, see proportions
table(glm.pred.val, Direction.2005)/length(Direction.2005)
# Setup
library(ISLR)
library(stargazer)
str(Smarket)
attach(Smarket)
# Summary statistics
stargazer(Smarket, type = "html", iqr = TRUE, median = TRUE)
# Setup
library(ISLR)
library(stargazer)
str(Smarket)
attach(Smarket)
# Summary statistics
stargazer(Smarket, type = "html", iqr = TRUE, median = TRUE)
# Correlations
cor(Smarket[,-9])
plot(Volume, main = "Distribution of Volume over Time")
par(mfrow=c(2:1))
# Histograms
hist(Volume) # slightly skewed
hist(Today)
plot(Today, main = "Distribution of 'Today' Over Time")
# Linear regression
mod2.1 <- lm(Today ~ Year + Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, data = Smarket)
stargazer(mod2.1, type = "html")
# Recode 'Direction' from factor to numeric
Direction1 <- ifelse(Direction=='Up', 1, 0)
Smarket1 <- cbind(Smarket, Direction1)
# Linear regression to model Direction1
mod2.2 <- lm(Direction1 ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, data = Smarket1)
stargazer(mod2.2, type="html")
# Linear regression to model Direction1 with reduced variables
mod2.3 <- lm(Direction1 ~ Lag1 + Lag2, data = Smarket1)
stargazer(mod2.3, type="html")
# Logit model for Direction1
logit3.1 <- glm(Direction1 ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, data = Smarket1,
family = "binomial")
stargazer(logit3.1, type = 'text')
# Logit model for Direction1
logit3.2 <- glm(Direction1 ~ Lag1 + Lag2, data = Smarket1,
family = "binomial")
stargazer(logit3.2, type = 'text')
# Predict Up/Down based on model
glm.prob <- predict(logit3.2, type = "response")
glm.pred <- rep("Down", 1250)
glm.pred[glm.prob>0.5] <- "Up"
# Compare predicted values to actual values to assess model accuracy
table(glm.pred, Direction)
# Or, see proportions
table(glm.pred, Direction)/1250
# Create training and validation datasets for more accurate prediction testing
train <- Smarket$Year<2005
Smarket.2005 <- Smarket [!train,] #Validation data set
Direction.2005 <- Direction[!train]
# Now create a model on the training dataset
logit3.4 <- glm(Direction1 ~ Lag1 + Lag2, data = Smarket1,
family = "binomial", subset = train)
stargazer(logit3.4, type = 'text')
glm.prob.val <- predict(logit3.4, newdata = Smarket.2005, type = "response")
glm.pred.val <- rep("Down", length(Direction.2005))
glm.pred.val[glm.prob.val>0.5] <- "Up"
# Compare predicted values to actual values to assess model accuracy
table(glm.pred.val, Direction.2005)
# Or, see proportions
table(glm.pred.val, Direction.2005)/length(Direction.2005)
# Summary statistics
stargazer(Smarket, type = "html", iqr = TRUE, median = TRUE, digits = 2)
install.packages("lpSolve")
install.packages("lpSolveAPI")
obj <- c(40, 25)
con <- matrix(c(30, 20
10, 10,
1, 0),
ncol=2, byrow=T)
con <- matrix(c(30, 20,
10, 10,
1, 0),
ncol=2, byrow=T)
eq <- c("<=", "<=", "<=")
rhs <- c(1200, 500, 30)
sol <- lp("max", obj, con, eq, rhs, compute.sens = T)
library(lpSolve)
sol <- lp("max", obj, con, eq, rhs, compute.sens = T)
sol
library(ISLR)
str(Smarket)
attach(Smarket)
library(e1071)
library(ISLR)
str(Smarket)
attach(Smarket)
library(e1071)
library(MASS)
# Discretize the Lag1, Lag2 variables for Bayesian Classification
Lag1.D <- ifelse(Lag1>0, "Up", "Down")
Lag2.D <- ifelse(Lag2>0, "Up", "Down")
Smarket1 <- cbind(Smarket, Lag1.D, Lag2.D)
View(Smarket1)
bayes.fit <- naiveBayes(Direction ~ Lag1.D + Lag2.D, data = Smarket1)
bayes.fit
bayes.pred <- predict(bayes.fit, Smarket1[,10:11])
bayes.pred
table(bayes.pred, Direction)
table(bayes.pred, Direction)/length(Smarket1)
table(bayes.pred, Direction)
mean(bayes.pred==Direction)
View(Smarket1)
train <- Smarket$Year < 2005
Smarket.2005 <- Smarket1[!train]
Smarket.2005 <- Smarket1[!train,]
Direction.2005 <- Direction[!train]
bayes.pred <- predict(bayes.fit, Smarket.2005[,10:11])
table(bayes.pred, Direction.2005)
# Create predicted direction based on model from Q1-1
bayes.pred <- predict(bayes.fit, Smarket1[,10:11])
# Tabulate predicted vs actual values
table(bayes.pred, Direction)
cor(Smarket[,-9])
# Get correlation matrix
cor(Smarket[,-9])
lda.fit <- lda(Direction ~ Lag1 + Lag2, data = Smarket, subset = train)
lda.fit
lda.pred <- predict(lda.fit, Smarket.2005)
names(lda.pred)
lda.pred$class
table(lda.pred$class, Direction.2005)
lda.class <- lda.pred$class
table(lda.class, Direction.2005)
lda.class1 <- rep("Down"), length(Direction.2005)
lda.class1 <- rep("Down", length(Direction.2005))
lda.class1[lda.pred$posterior[,1]>.48] <- "Up"
table(lda.class1, Direction.2005)
lda.class1[lda.pred$posterior[,1]>.9] <- "Up"
table(lda.class1, Direction.2005)
lda.class1 <- rep("Down", length(Direction.2005))
lda.class1[lda.pred$posterior[,1]>.48] <- "Up"
table(lda.class1, Direction.2005)
qda.fit <- qda(Direction ~ Lag1 + Lag2, data = Smarket, subset = train)
qda.fit
qda.fit <- predict(qda.fit, Smarket.2005)$class
str(qda.fit)
table(qda.fit, Direction.2005)
lda.pred <- predict(lda.fit, Smarket.2005)
# Tabulate the results
lda.class <- lda.pred$class
# lda.pred$class is the results of the predict function
table(lda.class, Direction.2005)/252
lda.pred <- predict(lda.fit, Smarket.2005)
# Tabulate the results
lda.class <- lda.pred$class
# lda.pred$class is the results of the predict function
table(lda.class, Direction.2005)
table(lda.class1, Direction.2005, dnn = c("Pred Using .48 Threshold", "Actual Direction"))
lda.class1[lda.pred$posterior[,1]>.75] <- "Up"
table(lda.class1, Direction.2005, dnn = c("Pred Using .75 Threshold", "Actual Direction"))
# Using a threshold of 0.48
lda.class1 <- rep("Down", length(Direction.2005))
lda.class1[lda.pred$posterior[,1]>.48] <- "Up"
table(lda.class1, Direction.2005, dnn = c("Pred Using .48 Threshold", "Actual Direction"))
# Using a threshold of 0.48
lda.class2 <- rep("Down", length(Direction.2005))
lda.class2[lda.pred$posterior[,1]>.75] <- "Up"
table(lda.class2, Direction.2005, dnn = c("Pred Using .75 Threshold", "Actual Direction"))
lda.class1 <- rep("Down", length(Direction.2005))
lda.class1[lda.pred$posterior[,1]>.48] <- "Up"
table(lda.class1, Direction.2005, dnn = c("Pred Using .48 Threshold", "Actual Direction"))
lda.class2 <- rep("Down", length(Direction.2005))
lda.class2[lda.pred$posterior[,1]>.75] <- "Up"
table(lda.class2, Direction.2005, dnn = c("Pred Using .75 Threshold", "Actual Direction"))
# Using a threshold of 0.48
lda.class1 <- rep("Down", length(Direction.2005))
lda.class1[lda.pred$posterior[,1]>.48] <- "Up"
table(lda.class1, Direction.2005, dnn = c("Pred Using .48 Threshold", "Actual Direction"))
# Using a threshold of 0.48
lda.class2 <- rep("Down", length(Direction.2005))
lda.class2[lda.pred$posterior[,1]>.75] <- "Up"
table(lda.class2, Direction.2005, dnn = c("Pred Using .75 Threshold", "Actual Direction"))
table(lda.class2, Direction.2005, dnn = c("Pred Using .75 Threshold", "Actual Direction"))
lda.class2
lda.class2 <- rep("Down", length(Direction.2005))
lda.class2[lda.pred$posterior[,1]>.75] <- "Up"
lda.class2
sum(lda.class2=='Up')
sum(lda.pred$posterior=='Up')
max(lda.pred$posterior)
lda.class2 <- rep("Down", length(Direction.2005))
lda.class2[lda.pred$posterior[,1]>.35] <- "Up"
table(lda.class2, Direction.2005, dnn = c("Pred Using .75 Threshold", "Actual Direction"))
lda.class2
# Using a threshold of 0.48
lda.class1 <- rep("Down", length(Direction.2005))
lda.class1[lda.pred$posterior[,1]>.48] <- "Up"
table(lda.class1, Direction.2005, dnn = c("Pred Using .48 Threshold", "Actual Direction"))
max(lda.pred$posterior)
min(lda.pred$posterior)
# Using a threshold of 0.48
lda.class1 <- rep("Down", length(Direction.2005))
lda.class1[lda.pred$posterior[,1]>.48] <- "Up"
table(lda.class1, Direction.2005, dnn = c("Pred Using .48 Threshold", "Actual Direction"))
library(ISLR)
str(Smarket)
attach(Smarket)
library(e1071)
library(MASS)
# Discretize the Lag1, Lag2 variables for Bayesian Classification
Lag1.D <- ifelse(Lag1>0, "Up", "Down")
Lag2.D <- ifelse(Lag2>0, "Up", "Down")
Smarket1 <- cbind(Smarket, Lag1.D, Lag2.D)
# Predict Direction by Lag1.D, Lag2.D using naive Bayes
bayes.fit <- naiveBayes(Direction ~ Lag1.D + Lag2.D, data = Smarket1)
bayes.fit
# Create predicted direction based on model from Q1-1
bayes.pred <- predict(bayes.fit, Smarket1[,10:11])
# Tabulate predicted vs actual values
table(bayes.pred, Direction)
# Create training data, validation dataset will be 2005 data
train <- Smarket$Year < 2005
Smarket.2005 <- Smarket1[!train,]
Direction.2005 <- Direction[!train]
bayes.pred <- predict(bayes.fit, Smarket.2005[,10:11])
table(bayes.pred, Direction.2005)
# Get correlation matrix
cor(Smarket[,-9])
# Requires MASS package
lda.fit <- lda(Direction ~ Lag1 + Lag2, data = Smarket, subset = train)
lda.fit
lda.pred <- predict(lda.fit, Smarket.2005)
# Tabulate the results
lda.class <- lda.pred$class
# lda.pred$class is the results of the predict function
table(lda.class, Direction.2005)
# Using a threshold of 0.48
lda.class1 <- rep("Down", length(Direction.2005))
lda.class1[lda.pred$posterior[,1]>.48] <- "Up"
table(lda.class1, Direction.2005, dnn = c("Pred Using .48 Threshold", "Actual Direction"))
qda.fit <- qda(Direction ~ Lag1 + Lag2, data = Smarket, subset = train)
qda.fit
# Keep only the $class column for predicted results
qda.fit <- predict(qda.fit, Smarket.2005)$class
table(qda.fit, Direction.2005)
install.packages("rpart")
install.packages("rpart.plot")
sessionInfo()
library(tidyverse)
library(ISLR)
str(Carseats)
attach(Carseats)
library(ISLR)
str(Carseats)
attach(Carseats)
library(rpart)
library(rpart.plot)
High <- ifelse (Sales <=8,"No","Yes")
Sales
Carseats <- data.frame(Carseats,High)
View(Carseats)
set.seed(2)
train <- sample(1:nrow(Carseats), 200)
Carseats.test <- Carseats[-train]
set.seed(2)
train <- sample(1:nrow(Carseats), 200)
Carseats.test <- Carseats[-train,]
High.test <- High[-train]
tree.fit <- rpart(High~. -Sales, data = Carseats, subset = train)
tree.fit
prp(tree.fit)
tree.fit
tree.pred <- predict(tree.fit, type = "class")
table(tree.pred, High[train])
tree.pred <- predict(tree.fit, type = "class")
table(tree.pred, High[train])
tree.pred.val <- predict(tree.fit, Carseats.test, type = "class")
tree.pred <- predict(tree.fit, type = "class")
table(tree.pred, High[train])
tree.pred.val <- predict(tree.fit, Carseats.test, type = "class")
table(tree.pred.val, High.test)
tree.pruned <- prune(tree.fit, cp = 0.05)
prp(tree.pruned)
tree.pred.pruned <- predict(tree.pruned, Carseats.test, type = "class")
table(tree.pred.pruned, High.test)
tree.pruned <- prune(tree.fit, cp = 0.05)
prp(tree.pruned)
tree.pred.pruned <- predict(tree.pruned, Carseats.test, type = "class")
table(tree.pred.pruned, High.test)
library(rpart)
library(rpart.plot)
High <- ifelse (Sales <=8,"No","Yes")
Carseats <- data.frame(Carseats,High)
set.seed(2)
train <- sample(1:nrow(Carseats), 200)
Carseats.test <- Carseats[-train,]
High.test <- High[-train]
tree.fit <- rpart(High~. -Sales, data = Carseats, subset = train)
tree.fit
prp(tree.fit)
set.seed(2)
train <- sample(1:nrow(Carseats), 200)
Carseats.test <- Carseats[-train,]
High.test <- High[-train]
tree.fit <- rpart(High~. -Sales, data = Carseats, subset = train)
tree.fit
prp(tree.fit)
High <- ifelse (Sales <=8,"No","Yes")
Carseats <- data.frame(Carseats,High)
set.seed(2)
train <- sample(1:nrow(Carseats), 200)
Carseats.test <- Carseats[-train,]
High.test <- High[-train]
tree.fit <- rpart(High~. -Sales, data = Carseats, subset = train)
prp(tree.fit)
library(rpart)
library(rpart.plot)
High <- ifelse (Sales <=8,"No","Yes")
Carseats <- data.frame(Carseats,High)
set.seed(2)
train <- sample(1:nrow(Carseats), 200)
Carseats.test <- Carseats[-train,]
High.test <- High[-train]
tree.fit <- rpart(High~. -Sales, data = Carseats, subset = train)
prp(tree.fit)
library(rpart)
library(rpart.plot)
High <- ifelse (Sales <=8,"No","Yes")
Carseats <- data.frame(Carseats,High)
set.seed(2)
train <- sample(1:nrow(Carseats), 200)
Carseats.test <- Carseats[-train,]
High.test <- High[-train]
tree.fit <- rpart(High~. -Sales, data = Carseats, subset = train)
prp(tree.fit)
tree.pred <- predict(tree.fit, type = "class")
table(tree.pred, High[train])
tree.pred.val <- predict(tree.fit, Carseats.test, type = "class")
table(tree.pred.val, High.test)
tree.pruned <- prune(tree.fit, cp = 0.05)
prp(tree.pruned)
tree.pred.pruned <- predict(tree.pruned, Carseats.test, type = "class")
table(tree.pred.pruned, High.test)
tree.logit <- glm(High~. -Sales, data = Carseats, subset = train, family = "binomial")
summary(tree.logit)
logit <- glm(High~. -Sales, data = Carseats, subset = train, family = "binomial")
summary(logit)
logit.pred <- predict(logit, Carseats.test, type = "class")
logit.pred <- predict(logit, Carseats.test, type = "response")
table(logit.pred, High.test)
logit.pred.bin <- ifelse(logit.pred>=0.5, 1, 0)
table(logit.pred.bin, High.test)
logit.pred.bin <- ifelse(logit.pred>=0.5, "Yes", "No")
table(logit.pred.bin, High.test)
tree.fit
prp(tree.fit)
sum(High[train])
sum(High[train]=="Yes")
tree.fit
prp(tree.fit)
library(ISLR)
str(Carseats)
attach(Carseats)
library(rpart)
library(rpart.plot)
High <- ifelse (Sales <=8,"No","Yes")
Carseats <- data.frame(Carseats,High)
set.seed(2)
train <- sample(1:nrow(Carseats), 200)
Carseats.test <- Carseats[-train,]
High.test <- High[-train]
tree.fit <- rpart(High~. -Sales, data = Carseats, subset = train)
tree.fit
prp(tree.fit)
tree.pred <- predict(tree.fit, type = "class")
table(tree.pred, High[train])
tree.pred.val <- predict(tree.fit, Carseats.test, type = "class")
table(tree.pred.val, High.test)
tree.pruned <- prune(tree.fit, cp = 0.05)
prp(tree.pruned)
tree.pred.pruned <- predict(tree.pruned, Carseats.test, type = "class")
table(tree.pred.pruned, High.test)
logit <- glm(High~. -Sales, data = Carseats, subset = train, family = "binomial")
summary(logit)
logit.pred <- predict(logit, Carseats.test, type = "response")
logit.pred.bin <- ifelse(logit.pred>=0.5, "Yes", "No")
table(logit.pred.bin, High.test)
library(rpart)
library(rpart.plot)
High <- ifelse (Sales <=8,"No","Yes")
Carseats <- data.frame(Carseats,High)
set.seed(2)
train <- sample(1:nrow(Carseats), 200)
Carseats.test <- Carseats[-train,]
High.test <- High[-train]
tree.fit <- rpart(High~. -Sales, data = Carseats, subset = train)
tree.fit
prp(tree.fit)
High <- ifelse (Sales <=8,"No","Yes")
Carseats <- data.frame(Carseats,High)
set.seed(2)
train <- sample(1:nrow(Carseats), 200)
Carseats.test <- Carseats[-train,]
High.test <- High[-train]
tree.fit <- rpart(High~. -Sales, data = Carseats, subset = train)
tree.fit
prp(tree.fit)
library(rpart)
library(rpart.plot)
High <- ifelse (Sales <=8,"No","Yes")
Carseats <- data.frame(Carseats,High)
set.seed(2)
train <- sample(1:nrow(Carseats), 200)
Carseats.test <- Carseats[-train,]
High.test <- High[-train]
tree.fit <- rpart(High~. -Sales, data = Carseats, subset = train)
tree.fit
prp(tree.fit)
library(ISLR)
str(Carseats)
attach(Carseats)
library(rpart)
library(rpart.plot)
High <- ifelse (Sales <=8,"No","Yes")
Carseats <- data.frame(Carseats,High)
set.seed(2)
train <- sample(1:nrow(Carseats), 200)
Carseats.test <- Carseats[-train,]
High.test <- High[-train]
tree.fit <- rpart(High~. -Sales, data = Carseats, subset = train)
tree.fit
prp(tree.fit)
tree.pred <- predict(tree.fit, type = "class")
table(tree.pred, High[train])
tree.pred.val <- predict(tree.fit, Carseats.test, type = "class")
table(tree.pred.val, High.test)
tree.pruned <- prune(tree.fit, cp = 0.05)
prp(tree.pruned)
tree.pred.pruned <- predict(tree.pruned, Carseats.test, type = "class")
table(tree.pred.pruned, High.test)
logit <- glm(High~. -Sales, data = Carseats, subset = train, family = "binomial")
summary(logit)
logit.pred <- predict(logit, Carseats.test, type = "response")
logit.pred.bin <- ifelse(logit.pred>=0.5, "Yes", "No")
table(logit.pred.bin, High.test)
install.packages("dynlm")
install.packages("dynlm")
library(blogdown)
setwd("~/Documents/Github/blog")
serve_site()
build_site()
